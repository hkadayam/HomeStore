pipeline {
    agent any

    environment {
        ORG = 'sds'
        ECR_URL = 'ecr.vip.ebayc3.com'
        ARTIFACTORY_PASS = credentials('ARTIFACTORY_PASS')
        CONAN_USER = 'sds'
        MASTER_BRANCH = 'master'
        TESTING_BRANCH = 'testing/v*'
        STABLE_BRANCH = 'stable/v*'
    }

    stages {
        stage('Adjust Tag for Master/PR') {
            when { not { anyOf {
                branch "${TESTING_BRANCH}"
                branch "${STABLE_BRANCH}"
            } } }
            steps {
                script {
                    sh(script: "sed -Ei 's,version = .*\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+).*,version = \"\\1-${env.BUILD_NUMBER}\",' conanfile.py")
                    BUILD_MISSING = "--build cascade --build missing"
                }
            }
        }
        stage('Adjust for Testing/Stable') {
            when { anyOf {
                branch "${TESTING_BRANCH}"
                branch "${STABLE_BRANCH}"
            } }
            steps {
                script {
                    BUILD_MISSING = ""
                }
            }
        }

        stage('Get Version') {
            steps {
                script {
                    PROJECT = sh(script: "grep -m 1 'name =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    VER = sh(script: "grep -m 1 'version =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    CONAN_CHANNEL = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    ECR_PATH = "${ECR_URL}/${ORG}/${PROJECT}"
                    TAG = "${VER}@${CONAN_USER}/${CONAN_CHANNEL}"
                    slackSend color: '#0063D1', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* is building."
                }
            }
        }

        stage('Tag Stable Build') {
            when { branch "${STABLE_BRANCH}" }
            steps {
                script {
                    TAG = "${VER}@"
                }
            }
        }

        stage('Build') {
            failFast true
            matrix {
                agent { label 'sds-builder' }
                axes {
                    axis {
                        name 'BUILD_TYPE'
                        values 'debug', 'release', 'test'
                    }
                    axis {
                        name 'SANITIZE'
                        values 'False', 'True'
                    }
                }
                excludes {
                    exclude {
                        axis {
                            name 'SANITIZE'
                            values 'True'
                        }
                        axis {
                            name 'BUILD_TYPE'
                            values 'release', 'test'
                        }
                    }
                }

                stages {
                    stage('Adjust Tag for Master/PR') {
                        when { not { anyOf {
                            branch "${TESTING_BRANCH}"
                            branch "${STABLE_BRANCH}"
                        } } }
                        steps {
                            sh(script: "sed -Ei 's,version = .*\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+).*,version = \"\\1-${env.BUILD_NUMBER}\",' conanfile.py")
                        }
                    }
                    stage("Build") {
                        steps {
                            sh "conan create ${BUILD_MISSING} -o homestore:sanitize=${SANITIZE} -pr ${BUILD_TYPE} . ${PROJECT}/${TAG}"
                            sh "find ${CONAN_USER_HOME} -type f -wholename '*bin/test_load' -exec cp {} .jenkins/test_load \\;"
                            sh "find ${CONAN_USER_HOME} -type f -wholename '*bin/test_volume' -exec cp {} .jenkins/test_volume \\;"
                            sh "find ${CONAN_USER_HOME} -type f -wholename '*bin/check_btree' -exec cp {} .jenkins/check_btree \\;"
                            sh "find ${CONAN_USER_HOME} -type f -wholename '*bin/vol_test.py' -exec cp -a {} .jenkins/vol_test.py \\;"
                            sh "find ${CONAN_USER_HOME} -type d -wholename '*bin/scripts' -exec cp -a {} .jenkins/scripts \\;"
                        }
                        post {
                            failure {
                                archiveArtifacts artifacts: "/root/.conan/data/${PROJECT}/${VER}/${CONAN_USER}/${CONAN_PASS}/build/*/src/logs/*", fingerprint: true
                            }
                        }
                    }
                    stage("Deploy Package") {
                        when {
                            expression { not { branch "PR_*" } }
                        }
                        steps {
                            sh "conan user -r ebay-local -p ${ARTIFACTORY_PASS} _service_sds"
                            sh "conan upload ${PROJECT}/${TAG} -c --all -r ebay-local"
                        }
                    }
                    stage("Image") {
                        steps {
                            withDockerRegistry([credentialsId: 'sds-sds', url: "https://${ECR_URL}"]) {
                                sh "docker build -t ${ECR_PATH}:${CONAN_CHANNEL}-${BUILD_TYPE} .jenkins/"
                            }
                        }
                    }
                    stage("Deploy Image") {
                        when { allOf {
			    anyOf {
				branch "testing/v*"
				branch "master"
			    }
                            branch "${DEPLOY_BRANCH}"
                        } }
                        steps {
                            withDockerRegistry([credentialsId: 'sds-sds', url: "https://${ECR_URL}"]) {
                                sh "docker push ${ECR_PATH}:${CONAN_CHANNEL}-${BUILD_TYPE}"
                            }
                        }
                        post {
                            success {
                                slackSend color: '#85B717', channel: '#sds-ci', message: "*${ECR_PATH}:${CONAN_CHANNEL}-${BUILD_TYPE}* has been uploaded to ECR."
                            }
			}
		    }
                }
            }
        }
    }

    post {
        failure {
            slackSend color: '#E43237', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has had a failure : ${BUILD_URL}"
        }
        success {
            slackSend color: '#85B717', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has been uploaded to conan repo."
        }
    }
}
