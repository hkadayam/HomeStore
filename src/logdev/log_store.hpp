#pragma once
#include <cstdint>
#include "log_dev.hpp"
#include <fds/utils.hpp>

namespace homestore {
typedef int64_t log_seq_num_t;

struct logstore_record {
    logdev_key m_dev_key;
};

class HomeLogStore {
public:
    static void start(bool format);
    static std::shared_ptr< HomeLogStore > create_new_log_store();
    static std::shared_ptr< HomeLogStore > open_log_store(logstore_id_t store_id);
    static void on_log_store_found(logstore_id_t store_id);
    static void on_append_completion(logstore_id_t id, logdev_key ld_key, void* ctx) {}
    static void on_logfound(logstore_id_t id, logdev_key ld_key, log_buffer buf) {}

    HomeLogStore(uint32_t store_id);

    /**
     * @brief This method appends the blob into the log and it returns the generated seq number
     *
     * @param b Blob of data to append
     * @return log_seq_num_t Returns the seqnum generated by the log
     */
    log_seq_num_t append_sync(const sisl::blob& b);

    void append_async(const sisl::blob& b, const std::function< void(log_seq_num_t) >& completion_cb);

    /**
     * @brief Write the blob at the user specified seq number.
     *
     * @param seq_num : Sequence number to insert data
     * @param b : Data blob to write to log
     */
    void write(log_seq_num_t seq_num, const sisl::blob& b);

    /**
     * @brief Read the log provided the sequence number
     *
     * @param seq_num
     * @return sisl::byte_array Returned byte_array is safe (shared_ptr) of data corresponding to the sequence number
     */
    sisl::byte_array read(log_seq_num_t seq_num);

private:
    static folly::Synchronized< std::map< logstore_id_t, std::shared_ptr< HomeLogStore > > > m_id_logstore_map;
    logstore_id_t m_store_id;
    sisl::StreamTracker< logstore_record > m_records;
};

} // namespace homestore